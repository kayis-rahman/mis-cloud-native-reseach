# COMMENTED OUT FOR TESTING - monitoring.yml
# name: Monitoring & Health Checks

# on:
#   schedule:
#     - cron: '*/15 * * * *'  # Every 15 minutes
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to monitor'
#         required: true
#         default: 'staging'
#         type: choice
#         options:
#         - staging
#         - production
#       check_type:
#         description: 'Type of health check'
#         required: true
#         default: 'all'
#         type: choice
#         options:
#         - all
#         - services
#         - infrastructure
#         - performance

# jobs:
#   health-check:
#     name: Service Health Check
#     runs-on: ubuntu-latest
#     if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'services' || github.event_name == 'schedule'
#     environment: ${{ github.event.inputs.environment || 'staging' }}
#     strategy:
#       matrix:
#         service: [identity, product, cart, order, payment, api-gateway]
#       fail-fast: false
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure kubectl
#       run: |
#         mkdir -p ~/.kube
#         if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
#           echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
#         else
#           echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
#         fi
#         chmod 600 ~/.kube/config

#     - name: Check ${{ matrix.service }} health
#       id: health_check
#       run: |
#         chmod +x scripts/smoke_test_a_service.sh
#         if SERVICE=${{ matrix.service }} timeout 300 ./scripts/smoke_test_a_service.sh; then
#           echo "status=healthy" >> $GITHUB_OUTPUT
#           echo "✅ ${{ matrix.service }} is healthy"
#         else
#           echo "status=unhealthy" >> $GITHUB_OUTPUT
#           echo "❌ ${{ matrix.service }} health check failed"
#           exit 1
#         fi

#     - name: Record health status
#       if: always()
#       run: |
#         echo "Service: ${{ matrix.service }}" >> health-status.txt
#         echo "Status: ${{ steps.health_check.outputs.status }}" >> health-status.txt
#         echo "Timestamp: $(date -u)" >> health-status.txt
#         echo "Environment: ${{ github.event.inputs.environment || 'staging' }}" >> health-status.txt
#         echo "---" >> health-status.txt

#     - name: Upload health status
#       if: always()
#       uses: actions/upload-artifact@v4
#       with:
#         name: health-status-${{ matrix.service }}
#         path: health-status.txt

#   infrastructure-check:
#     name: Infrastructure Health Check
#     runs-on: ubuntu-latest
#     if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'infrastructure' || github.event_name == 'schedule'
#     environment: ${{ github.event.inputs.environment || 'staging' }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure kubectl
#       run: |
#         mkdir -p ~/.kube
#         if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
#           echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
#         else
#           echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
#         fi
#         chmod 600 ~/.kube/config

#     - name: Check cluster health
#       run: |
#         echo "=== Cluster Info ==="
#         kubectl cluster-info
#
#         echo "=== Node Status ==="
#         kubectl get nodes -o wide
#
#         echo "=== Pod Status ==="
#         kubectl get pods --all-namespaces
#
#         echo "=== Service Status ==="
#         kubectl get services --all-namespaces

#     - name: Check observability stack
#       run: |
#         chmod +x scripts/validate_observability.sh
#         ./scripts/validate_observability.sh

#   performance-check:
#     name: Performance Check
#     runs-on: ubuntu-latest
#     if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance'
#     environment: ${{ github.event.inputs.environment || 'staging' }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure kubectl
#       run: |
#         mkdir -p ~/.kube
#         if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
#           echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
#         else
#           echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
#         fi
#         chmod 600 ~/.kube/config

#     - name: Run performance tests
#       run: |
#         # Get API Gateway URL
#         GATEWAY_URL=$(kubectl get service mis-cloud-native-api-gateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
#         if [ -z "$GATEWAY_URL" ]; then
#           GATEWAY_URL=$(kubectl get service mis-cloud-native-api-gateway -o jsonpath='{.spec.clusterIP}')
#         fi
#
#         # Run basic load test
#         echo "Running performance test against $GATEWAY_URL"
#         for i in {1..100}; do
#           curl -s "http://$GATEWAY_URL/actuator/health" > /dev/null &
#         done
#         wait
#
#         echo "Performance test completed"

#   monitoring-summary:
#     name: Monitoring Summary
#     runs-on: ubuntu-latest
#     needs: [health-check, infrastructure-check]
#     if: always()
#     steps:
#     - name: Download all health statuses
#       uses: actions/download-artifact@v4
#       with:
#         pattern: health-status-*
#         merge-multiple: true

#     - name: Generate monitoring report
#       run: |
#         cat << EOF > monitoring-report.md
#         # Monitoring Report
#
#         **Date:** $(date -u)
#         **Environment:** ${{ github.event.inputs.environment || 'staging' }}
#         **Check Type:** ${{ github.event.inputs.check_type || 'scheduled' }}
#
#         ## Service Health Status
#         $(cat health-status-*.txt 2>/dev/null || echo "No health status files found")
#
#         ## Infrastructure Status
#         - Health Check Job: ${{ needs.infrastructure-check.result }}
#
#         ## Summary
#         - Overall Status: ${{ (needs.health-check.result == 'success' && needs.infrastructure-check.result == 'success') && '✅ All systems healthy' || '❌ Issues detected' }}
#         EOF

#     - name: Upload monitoring report
#       uses: actions/upload-artifact@v4
#       with:
#         name: monitoring-report-$(date +%Y%m%d-%H%M)
#         path: monitoring-report.md
