name: Monitoring & Health Checks

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      check_type:
        description: 'Type of health check'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - services
        - infrastructure
        - performance

jobs:
  health-check:
    name: Service Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'services' || github.event_name == 'schedule'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    strategy:
      matrix:
        service: [identity, product, cart, order, payment, api-gateway]
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Check ${{ matrix.service }} health
      id: health_check
      run: |
        chmod +x scripts/smoke_test_a_service.sh
        if SERVICE=${{ matrix.service }} timeout 300 ./scripts/smoke_test_a_service.sh; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "✅ ${{ matrix.service }} is healthy"
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "❌ ${{ matrix.service }} health check failed"
          exit 1
        fi

    - name: Record health status
      if: always()
      run: |
        echo "Service: ${{ matrix.service }}" >> health-status.txt
        echo "Status: ${{ steps.health_check.outputs.status }}" >> health-status.txt
        echo "Timestamp: $(date -u)" >> health-status.txt
        echo "Environment: ${{ github.event.inputs.environment || 'staging' }}" >> health-status.txt
        echo "---" >> health-status.txt

    - name: Upload health status
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: health-status-${{ matrix.service }}
        path: health-status.txt

  infrastructure-check:
    name: Infrastructure Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'infrastructure' || github.event_name == 'schedule'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Check cluster health
      run: |
        echo "=== Cluster Info ==="
        kubectl cluster-info
        
        echo "=== Node Status ==="
        kubectl get nodes -o wide
        
        echo "=== Pod Status ==="
        kubectl get pods --all-namespaces
        
        echo "=== Service Status ==="
        kubectl get services --all-namespaces
        
        echo "=== Deployment Status ==="
        kubectl get deployments --all-namespaces

    - name: Validate infrastructure
      run: |
        chmod +x scripts/validate_infra.sh
        ./scripts/validate_infra.sh

    - name: Check resource usage
      run: |
        echo "=== Resource Usage ==="
        kubectl top nodes || echo "Metrics server not available"
        kubectl top pods --all-namespaces || echo "Pod metrics not available"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Install performance testing tools
      run: |
        # Install k6 for load testing
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Create performance test script
      run: |
        cat << 'EOF' > performance-test.js
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          vus: 10, // 10 virtual users
          duration: '30s',
        };

        export default function () {
          // Test API Gateway health endpoint
          let response = http.get('http://localhost:8080/actuator/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF

    - name: Run performance tests
      run: |
        # Port forward to API Gateway
        kubectl port-forward service/mis-api-gateway 8080:8080 &
        PF_PID=$!
        
        # Wait for port forward to be ready
        sleep 10
        
        # Run performance test
        k6 run performance-test.js || true
        
        # Clean up
        kill $PF_PID || true

  comprehensive-smoke-test:
    name: Comprehensive Smoke Test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Run comprehensive smoke tests
      run: |
        chmod +x scripts/smoke_test_all_services.sh
        ./scripts/smoke_test_all_services.sh

  generate-monitoring-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, infrastructure-check, comprehensive-smoke-test]
    if: always()
    steps:
    - name: Download all health artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: health-status-*
        path: health-reports

    - name: Generate monitoring report
      run: |
        cat << EOF > monitoring-report.md
        # Monitoring Report
        
        **Date:** $(date -u)
        **Environment:** ${{ github.event.inputs.environment || 'staging' }}
        **Trigger:** ${{ github.event_name }}
        
        ## Health Check Results
        
        | Service | Status | 
        |---------|--------|
        EOF
        
        # Process individual health reports
        for report in health-reports/health-status-*/health-status.txt; do
          if [[ -f "$report" ]]; then
            service=$(grep "Service:" "$report" | cut -d' ' -f2)
            status=$(grep "Status:" "$report" | cut -d' ' -f2)
            if [[ "$status" == "healthy" ]]; then
              echo "| $service | ✅ Healthy |" >> monitoring-report.md
            else
              echo "| $service | ❌ Unhealthy |" >> monitoring-report.md
            fi
          fi
        done
        
        cat << EOF >> monitoring-report.md
        
        ## Job Results
        - Health Check: ${{ needs.health-check.result }}
        - Infrastructure Check: ${{ needs.infrastructure-check.result }}
        - Smoke Test: ${{ needs.comprehensive-smoke-test.result }}
        
        ## Recommendations
        EOF
        
        if [[ "${{ needs.health-check.result }}" == "failure" ]]; then
          echo "- ⚠️ Some services are unhealthy - investigate logs and restart if necessary" >> monitoring-report.md
        fi
        
        if [[ "${{ needs.infrastructure-check.result }}" == "failure" ]]; then
          echo "- ⚠️ Infrastructure issues detected - check cluster resources and nodes" >> monitoring-report.md
        fi
        
        if [[ "${{ needs.comprehensive-smoke-test.result }}" == "failure" ]]; then
          echo "- ⚠️ Smoke tests failed - check service connectivity and configuration" >> monitoring-report.md
        fi
        
        if [[ "${{ needs.health-check.result }}" == "success" && "${{ needs.infrastructure-check.result }}" == "success" && "${{ needs.comprehensive-smoke-test.result }}" == "success" ]]; then
          echo "- ✅ All systems operational - no action required" >> monitoring-report.md
        fi

    - name: Upload monitoring report
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-report-$(date +%Y%m%d-%H%M%S)
        path: monitoring-report.md

  alert-on-failure:
    name: Alert on Failure
    runs-on: ubuntu-latest
    needs: [health-check, infrastructure-check, comprehensive-smoke-test]
    if: failure()
    steps:
    - name: Send alert notification
      run: |
        echo "🚨 ALERT: Monitoring checks failed!"
        echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
        echo "Time: $(date -u)"
        echo "Failed jobs:"
        echo "- Health Check: ${{ needs.health-check.result }}"
        echo "- Infrastructure Check: ${{ needs.infrastructure-check.result }}"
        echo "- Smoke Test: ${{ needs.comprehensive-smoke-test.result }}"
        echo ""
        echo "Please investigate the failed workflows and take corrective action."
