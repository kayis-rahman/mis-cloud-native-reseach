name: CI Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'services/**'
      - 'helm/**'
      - 'terraform/**'
      - '.github/workflows/**'
      - 'scripts/**'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  GHCR_OWNER: ${{ github.repository_owner }}
  GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository'

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        service: [api-gateway, identity, product, cart, order, payment]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
    
    - name: Build and Test
      working-directory: services/${{ matrix.service }}
      run: |
        mvn -B clean verify
        
    - name: Run Integration Tests
      working-directory: services/${{ matrix.service }}
      run: |
        chmod +x ../scripts/run_tests.sh
        ../scripts/run_tests.sh
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.service }}
        path: services/${{ matrix.service }}/target/surefire-reports

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
    environment: production

    strategy:
      matrix:
        service: [api-gateway, identity, product, cart, order, payment]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      env:
        SERVICE: ${{ matrix.service }}
      run: |
        chmod +x ./scripts/docker-build.sh
        ./scripts/docker-build.sh

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${{ matrix.service }}:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  terraform-validate:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_REGION: us-east-1

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Auth to GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        project_id: '${{ secrets.GCP_PROJECT }}'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: |
        # Create a minimal terraform.tfvars file for validation
        echo 'gcp_project_id = "${{ secrets.GCP_PROJECT }}"' > terraform.tfvars
        echo 'project_name = "mis-cloud-native"' >> terraform.tfvars
        terraform init -backend=false

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check
    
    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
