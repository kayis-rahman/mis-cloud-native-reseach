name: Infrastructure Management

on:
  push:
    branches: [ main ]
    paths:
    - 'terraform/**'
    - 'helm/**'
  pull_request:
    paths:
    - 'terraform/**'
    - 'helm/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
        - validate
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  TF_VERSION: '1.5.0'
  HELM_VERSION: '3.12.0'

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check=true

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure GCP credentials
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan
        terraform show -json tfplan > plan.json

    - name: Upload Terraform plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'staging' }}
        path: |
          terraform/tfplan
          terraform/plan.json

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && (github.event.inputs.action == 'apply' || github.event_name == 'push')
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure GCP credentials
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve

    - name: Validate infrastructure
      run: |
        chmod +x scripts/validate_infra.sh
        ./scripts/validate_infra.sh

  helm-lint:
    name: Helm Chart Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Helm Lint
      run: |
        helm lint helm/mis-cloud-native

    - name: Helm Template
      run: |
        helm template test-release helm/mis-cloud-native \
          --values helm/mis-cloud-native/values.yaml > rendered-manifests.yaml

    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin

        # Validate manifests
        kubeval rendered-manifests.yaml

    - name: Upload rendered manifests
      uses: actions/upload-artifact@v4
      with:
        name: helm-manifests
        path: rendered-manifests.yaml

  infrastructure-bootstrap:
    name: Bootstrap Infrastructure
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: github.event.inputs.action == 'apply' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Bootstrap cluster state
      run: |
        chmod +x scripts/bootstrap_state.sh
        ./scripts/bootstrap_state.sh

    - name: Create infrastructure secrets
      run: |
        chmod +x scripts/create_secrets.sh
        ./scripts/create_secrets.sh
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD_STAGING }}
        JWT_SECRET: ${{ secrets.JWT_SECRET_STAGING }}

    - name: Setup databases
      run: |
        chmod +x scripts/create_db.sh
        ./scripts/create_db.sh

  infrastructure-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Manual approval required
      run: |
        echo "⚠️  INFRASTRUCTURE DESTRUCTION REQUESTED"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "This action will destroy all infrastructure in the specified environment"

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Destroy applications
      run: |
        chmod +x scripts/destroy_all.sh
        ./scripts/destroy_all.sh

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure GCP credentials
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV

    - name: Terraform Destroy
      run: |
        cd terraform
        terraform init
        terraform destroy -auto-approve
