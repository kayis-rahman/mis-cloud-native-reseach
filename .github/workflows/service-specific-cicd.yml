name: Service-Specific CI/CD

on:
  push:
    paths:
    - 'services/**'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build and deploy'
        required: true
        type: choice
        options:
        - identity
        - product
        - cart
        - order
        - payment
        - api-gateway
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  GHCR_OWNER: ${{ github.repository_owner }}

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed services
      id: changes
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual trigger - use specified service
          SERVICES='["${{ github.event.inputs.service }}"]'
          echo "services=${{ github.event.inputs.service }}" >> $GITHUB_OUTPUT
        else
          # Auto trigger - detect changes
          CHANGED_SERVICES=()
          for service in identity product cart order payment api-gateway; do
            if git diff --name-only HEAD~1 HEAD | grep -q "^services/$service/"; then
              CHANGED_SERVICES+=("$service")
            fi
          done
          
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "No service changes detected"
            SERVICES='[]'
            echo "services=" >> $GITHUB_OUTPUT
          else
            SERVICES=$(printf '%s\n' "${CHANGED_SERVICES[@]}" | jq -R . | jq -s .)
            echo "services=$(echo "${CHANGED_SERVICES[@]}")" >> $GITHUB_OUTPUT
          fi
        fi
        
        echo "matrix={\"service\":$SERVICES}" >> $GITHUB_OUTPUT
        echo "Detected services: $SERVICES"

  build-and-test-service:
    name: Build & Test Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services != ''
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run tests for ${{ matrix.service }}
      run: |
        chmod +x scripts/run_tests.sh
        ./scripts/run_tests.sh ${{ matrix.service }}

    - name: Run linting (Checkstyle)
      run: |
        cd services/${{ matrix.service }}
        mvn checkstyle:check -B

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push service image
      run: |
        chmod +x scripts/docker-build.sh
        export GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
        export SERVICE=${{ matrix.service }}
        export IMAGE_NAME=${{ matrix.service }}
        export TAG=${{ github.sha }}
        ./scripts/docker-build.sh

    - name: Security scan service image
      run: |
        chmod +x scripts/scan_security.sh
        IMAGE="${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${{ matrix.service }}:${{ github.sha }}" \
          NO_PROGRESS=1 ./scripts/scan_security.sh

  deploy-service:
    name: Deploy Service
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test-service]
    if: needs.detect-changes.outputs.services != '' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Deploy ${{ matrix.service }}
      run: |
        chmod +x scripts/deploy_service.sh
        export SERVICE=${{ matrix.service }}
        export GLOBAL_REGISTRY="${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}"
        export TAG=${{ github.sha }}
        ./scripts/deploy_service.sh

    - name: Validate service deployment
      run: |
        chmod +x scripts/validate_deploy.sh
        SERVICE=${{ matrix.service }} ./scripts/validate_deploy.sh

    - name: Run smoke test for service
      run: |
        chmod +x scripts/smoke_test_a_service.sh
        SERVICE=${{ matrix.service }} ./scripts/smoke_test_a_service.sh
