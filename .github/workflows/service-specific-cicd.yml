# COMMENTED OUT FOR TESTING - service-specific-cicd.yml
# name: Service-Specific CI/CD

# on:
#   push:
#     paths:
#     - 'services/**'
#   workflow_dispatch:
#     inputs:
#       service:
#         description: 'Service to build and deploy'
#         required: true
#         type: choice
#         options:
#         - identity
#         - product
#         - cart
#         - order
#         - payment
#         - api-gateway
#       environment:
#         description: 'Target environment'
#         required: true
#         default: 'staging'
#         type: choice
#         options:
#         - staging
#         - production

# env:
#   REGISTRY: ghcr.io
#   GHCR_OWNER: ${{ github.repository_owner }}

# jobs:
#   detect-changes:
#     name: Detect Changed Services
#     runs-on: ubuntu-latest
#     outputs:
#       services: ${{ steps.changes.outputs.services }}
#       matrix: ${{ steps.changes.outputs.matrix }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Detect changed services
#       id: changes
#       run: |
#         if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
#           # Manual trigger - use specified service
#           SERVICES='["${{ github.event.inputs.service }}"]'
#           echo "services=${{ github.event.inputs.service }}" >> $GITHUB_OUTPUT
#         else
#           # Auto trigger - detect changes
#           CHANGED_SERVICES=()
#           for service in identity product cart order payment api-gateway; do
#             if git diff --name-only HEAD~1 HEAD | grep -q "^services/$service/"; then
#               CHANGED_SERVICES+=("$service")
#             fi
#           done
#
#           if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
#             echo "No service changes detected"
#             SERVICES='[]'
#             echo "services=" >> $GITHUB_OUTPUT
#           else
#             SERVICES=$(printf '%s\n' "${CHANGED_SERVICES[@]}" | jq -R . | jq -s .)
#             echo "services=$(echo "${CHANGED_SERVICES[@]}")" >> $GITHUB_OUTPUT
#           fi
#         fi
#
#         echo "matrix={\"service\":$SERVICES}" >> $GITHUB_OUTPUT
#         echo "Detected services: $SERVICES"

#   build-and-test-service:
#     name: Build & Test Service
#     runs-on: ubuntu-latest
#     needs: detect-changes
#     if: needs.detect-changes.outputs.services != ''
#     strategy:
#       matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up JDK 17
#       uses: actions/setup-java@v4
#       with:
#         java-version: '17'
#         distribution: 'temurin'

#     - name: Cache Maven dependencies
#       uses: actions/cache@v4
#       with:
#         path: .m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-

#     - name: Run tests for ${{ matrix.service }}
#       run: |
#         cd services/${{ matrix.service }}
#         mvn clean test -B

#     - name: Build ${{ matrix.service }}
#       run: |
#         cd services/${{ matrix.service }}
#         mvn clean package -DskipTests -B

#     - name: Build Docker image
#       run: |
#         cd services/${{ matrix.service }}
#         docker build -t ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${{ matrix.service }}:${{ github.sha }} .
#         docker build -t ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${{ matrix.service }}:latest .

#     - name: Log in to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ${{ env.REGISTRY }}
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}

#     - name: Push Docker image
#       run: |
#         docker push ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${{ matrix.service }}:${{ github.sha }}
#         docker push ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${{ matrix.service }}:latest

#   deploy-service:
#     name: Deploy Service
#     runs-on: ubuntu-latest
#     needs: [detect-changes, build-and-test-service]
#     if: needs.detect-changes.outputs.services != '' && github.event_name != 'pull_request'
#     environment: ${{ github.event.inputs.environment || 'staging' }}
#     strategy:
#       matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure kubectl
#       run: |
#         mkdir -p ~/.kube
#         if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
#           echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
#         else
#           echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
#         fi
#         chmod 600 ~/.kube/config

#     - name: Setup Helm
#       uses: azure/setup-helm@v3
#       with:
#         version: '3.12.0'

#     - name: Deploy ${{ matrix.service }}
#       run: |
#         chmod +x scripts/deploy_service.sh
#         SERVICE=${{ matrix.service }} \
#         ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }} \
#         IMAGE_TAG=${{ github.sha }} \
#         ./scripts/deploy_service.sh

#     - name: Wait for deployment
#       run: |
#         kubectl wait --for=condition=available --timeout=300s \
#           deployment/mis-cloud-native-${{ matrix.service }} \
#           -n ${{ github.event.inputs.environment || 'staging' }}

#     - name: Run smoke test
#       run: |
#         chmod +x scripts/smoke_test_a_service.sh
#         SERVICE=${{ matrix.service }} \
#         ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }} \
#         ./scripts/smoke_test_a_service.sh

#   notify-deployment:
#     name: Notify Deployment
#     runs-on: ubuntu-latest
#     needs: [detect-changes, deploy-service]
#     if: always() && needs.detect-changes.outputs.services != ''
#     steps:
#     - name: Deployment summary
#       run: |
#         echo "=== Service Deployment Summary ==="
#         echo "Services: ${{ needs.detect-changes.outputs.services }}"
#         echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
#         echo "Deployment result: ${{ needs.deploy-service.result }}"
#
#         if [[ "${{ needs.deploy-service.result }}" == "success" ]]; then
#           echo "✅ All services deployed successfully!"
#         else
#           echo "❌ Some deployments failed!"
#         fi
