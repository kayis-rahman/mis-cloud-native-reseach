name: CI/CD Pipeline - Cloud Native Microservices

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'helm/**'
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - 'helm/**'
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
      services:
        description: 'Services to deploy (space-separated, or "all")'
        required: false
        default: 'api-gateway'
      deploy_observability:
        description: 'Deploy observability stack only'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  IMAGE_REPOSITORY: ghcr.io/kayis-rahman/mis-cloud-native-research
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'mis-cloud-native-research' }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME || 'mis-cloud-native-gke' }}
  GCP_REGION: ${{ secrets.GCP_REGION || 'us-central1' }}

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.services != ''
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run Maven tests for API Gateway
      working-directory: ./services/api-gateway
      run: |
        ./mvnw clean test
        ./mvnw jacoco:report

    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests - API Gateway
        path: services/api-gateway/target/surefire-reports/*.xml
        reporter: java-junit

    - name: Run security scan on code
      run: |
        chmod +x scripts/scan_secrets.sh
        ./scripts/scan_secrets.sh

    - name: SonarCloud Scan (if available)
      if: env.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 2: Build and Push Container Images
  build-images:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: github.event_name != 'pull_request' && (github.event.inputs.deploy_observability != 'true' || github.event.inputs.deploy_observability == '')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_REPOSITORY }}/api-gateway
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and test in Docker
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./services/api-gateway
        file: ./services/api-gateway/Dockerfile
        target: test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push final image
      uses: docker/build-push-action@v5
      with:
        context: ./services/api-gateway
        file: ./services/api-gateway/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        platforms: linux/amd64

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Infrastructure Provisioning
  provision-infrastructure:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name != 'pull_request'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment
      id: set-env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Initialize Terraform
      working-directory: ./terraform
      run: |
        terraform init
        terraform workspace select ${{ steps.set-env.outputs.environment }} || terraform workspace new ${{ steps.set-env.outputs.environment }}

    - name: Plan Terraform
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="environment=${{ steps.set-env.outputs.environment }}" \
          -var="project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="region=${{ env.GCP_REGION }}" \
          -var="cluster_name=${{ env.GKE_CLUSTER }}" \
          -out=tfplan

    - name: Apply Terraform
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve tfplan

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

  # Job 4: Deploy API Gateway
  deploy-api-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: [build-images, provision-infrastructure]
    if: github.event_name != 'pull_request' && (github.event.inputs.deploy_observability != 'true' || github.event.inputs.deploy_observability == '')
    environment: ${{ needs.provision-infrastructure.outputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin --quiet

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Create secrets in GCP Secret Manager
      run: |
        chmod +x scripts/create_secrets.sh
        ENVIRONMENT=${{ needs.provision-infrastructure.outputs.environment }} ./scripts/create_secrets.sh

    - name: Deploy API Gateway with Helm
      run: |
        ENVIRONMENT=${{ needs.provision-infrastructure.outputs.environment }}
        NAMESPACE=${ENVIRONMENT}
        
        # Create namespace
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm
        helm upgrade --install api-gateway-${ENVIRONMENT} ./helm/mis-cloud-native \
          --namespace $NAMESPACE \
          --set global.environment=$ENVIRONMENT \
          --set global.gcp.projectId=${{ env.GCP_PROJECT_ID }} \
          --set global.gcp.cluster.name=${{ env.GKE_CLUSTER }} \
          --set global.imageRegistry=${{ env.REGISTRY }} \
          --set services.api-gateway.enabled=true \
          --set services.api-gateway.image=${{ needs.build-images.outputs.image-tag }} \
          --set services.api-gateway.replicaCount=${{ env.ENVIRONMENT == 'production' && '2' || '1' }} \
          --values ./helm/mis-cloud-native/values-${ENVIRONMENT}.yaml \
          --wait --timeout=300s

    - name: Verify deployment
      run: |
        ENVIRONMENT=${{ needs.provision-infrastructure.outputs.environment }}
        NAMESPACE=${ENVIRONMENT}
        
        echo "🔍 Verifying API Gateway deployment in $ENVIRONMENT environment..."
        
        # Check pods
        kubectl get pods -n $NAMESPACE -l app.kubernetes.io/component=api-gateway
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          -l app.kubernetes.io/component=api-gateway \
          -n $NAMESPACE --timeout=300s
        
        # Check services
        kubectl get services -n $NAMESPACE -l app.kubernetes.io/component=api-gateway

    - name: Run smoke tests
      run: |
        chmod +x scripts/smoke_test_a_service.sh
        ./scripts/smoke_test_a_service.sh api-gateway ${{ needs.provision-infrastructure.outputs.environment }}

    - name: Check observability metrics
      run: |
        ENVIRONMENT=${{ needs.provision-infrastructure.outputs.environment }}
        NAMESPACE=${ENVIRONMENT}
        
        echo "📊 Checking if API Gateway metrics are exposed..."
        
        # Check if actuator endpoints are accessible
        kubectl get pod -n $NAMESPACE -l app.kubernetes.io/component=api-gateway -o name | head -1 | \
        xargs kubectl exec -n $NAMESPACE -- wget -q -O- http://localhost:8080/actuator/health || \
        echo "⚠️ Health endpoint not yet accessible"
        
        # Check if Prometheus metrics are available
        kubectl get pod -n $NAMESPACE -l app.kubernetes.io/component=api-gateway -o name | head -1 | \
        xargs kubectl exec -n $NAMESPACE -- wget -q -O- http://localhost:8080/actuator/prometheus | head -10 || \
        echo "⚠️ Prometheus metrics not yet accessible"

  # Job 5: Deploy Observability Stack (Manual)
  deploy-observability:
    name: Deploy Observability Stack
    runs-on: ubuntu-latest
    needs: [provision-infrastructure]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_observability == 'true'
    environment: ${{ github.event.inputs.deploy_environment || 'development' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Deploy Observability Stack
      run: |
        chmod +x scripts/deploy-observability-helm.sh
        ENVIRONMENT=${{ github.event.inputs.deploy_environment || 'development' }} ./scripts/deploy-observability-helm.sh

    - name: Verify observability deployment
      run: |
        chmod +x scripts/validate_observability.sh
        ENVIRONMENT=${{ github.event.inputs.deploy_environment || 'development' }} ./scripts/validate_observability.sh

  # Job 6: Performance and Load Testing
  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [deploy-api-gateway]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Install Python and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust requests

    - name: Run load tests
      run: |
        chmod +x scripts/run_tests.sh
        ENVIRONMENT=production ./scripts/run_tests.sh

    - name: Check HPA scaling
      run: |
        echo "🔍 Checking Horizontal Pod Autoscaler status..."
        kubectl get hpa -n production || echo "No HPA configured yet"
        
        echo "📊 Checking pod scaling during load test..."
        kubectl get pods -n production -l app.kubernetes.io/component=api-gateway

  # Job 7: Security and Compliance
  security-compliance:
    name: Security & Compliance Checks
    runs-on: ubuntu-latest
    needs: [deploy-api-gateway]
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Run security scans
      run: |
        chmod +x scripts/scan_security.sh
        ./scripts/scan_security.sh

    - name: Validate RBAC and Network Policies
      run: |
        echo "🔒 Checking RBAC policies..."
        kubectl get rolebindings,clusterrolebindings --all-namespaces | grep api-gateway || echo "No specific RBAC found"
        
        echo "🛡️ Checking Network Policies..."
        kubectl get networkpolicies --all-namespaces

    - name: Check secret management
      run: |
        echo "🔐 Validating secret management..."
        kubectl get secrets --all-namespaces | grep api-gateway || echo "No API Gateway secrets found"

  # Job 8: Cost and Resource Monitoring
  cost-monitoring:
    name: Cost & Resource Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-api-gateway]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Check resource usage
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}
        
        echo "📊 Resource usage for API Gateway:"
        kubectl top pods -n production -l app.kubernetes.io/component=api-gateway || echo "Metrics server not available"
        
        echo "💰 Checking cost allocation tags..."
        gcloud compute instances list --format="table(name,zone,machineType,status,labels)" --filter="labels.environment=production"

    - name: Generate cost report
      run: |
        echo "💰 Cost monitoring summary generated"
        echo "Environment: production"
        echo "Service: api-gateway"
        echo "Timestamp: $(date)"
        echo "Note: Set up billing export to BigQuery for detailed cost analysis"
