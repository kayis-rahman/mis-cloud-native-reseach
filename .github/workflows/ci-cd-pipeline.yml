name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
      services:
        description: 'Services to deploy (space-separated, or "all")'
        required: false
        default: 'api-gateway'

env:
  REGISTRY: ghcr.io
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  IMAGE_REPOSITORY: ghcr.io/kayis-rahman/mis-cloud-native-research

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # Job 1: Determine Environment
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      gcp_project: ${{ steps.set-env.outputs.gcp_project }}
      gke_cluster: ${{ steps.set-env.outputs.gke_cluster }}
      gcp_region: ${{ steps.set-env.outputs.gcp_region }}
      namespace: ${{ steps.set-env.outputs.namespace }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.deploy_environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENV="development"
          else
            ENV="development"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          # Set environment-specific GCP values (minimal setup)
          case $ENV in
            production)
              echo "gcp_project=${{ secrets.GCP_PROJECT_ID || 'mis-cloud-native-prod' }}" >> $GITHUB_OUTPUT
              echo "gke_cluster=mis-cloud-native-prod" >> $GITHUB_OUTPUT
              echo "gcp_region=${{ secrets.GCP_REGION || 'us-central1' }}" >> $GITHUB_OUTPUT
              echo "namespace=production" >> $GITHUB_OUTPUT
              ;;
            development)
              echo "gcp_project=${{ secrets.GCP_PROJECT_ID || 'mis-cloud-native-dev' }}" >> $GITHUB_OUTPUT
              echo "gke_cluster=mis-cloud-native-dev" >> $GITHUB_OUTPUT
              echo "gcp_region=${{ secrets.GCP_REGION || 'us-central1' }}" >> $GITHUB_OUTPUT
              echo "namespace=development" >> $GITHUB_OUTPUT
              ;;
          esac

  # Job 2: Code Quality and Security (Commented out for testing)
  # code-quality:
  #   name: Code Quality & Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'

  #   - name: Cache Maven dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: .m2/repository
  #       key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: |
  #         ${{ runner.os }}-maven-

  #   - name: Run tests for API Gateway
  #     working-directory: ./services/api-gateway
  #     run: |
  #       mvn clean test -Dspring.profiles.active=test

  # Job 3: Build and Push Container Images (API Gateway only)
  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and test API Gateway
      working-directory: ./services/api-gateway
      run: |
        mvn clean package -DskipTests

    - name: Build and push API Gateway Docker image
      working-directory: ./services/api-gateway
      run: |
        IMAGE_TAG="${{ env.IMAGE_REPOSITORY }}/api-gateway:${{ github.sha }}"
        IMAGE_TAG_ENV="${{ env.IMAGE_REPOSITORY }}/api-gateway:${{ needs.determine-environment.outputs.environment }}"
        
        docker build -t $IMAGE_TAG -t $IMAGE_TAG_ENV .
        docker push $IMAGE_TAG
        docker push $IMAGE_TAG_ENV

  # Job 4: Deploy to GCP (API Gateway with Observability)
  deploy-gcp:
    name: Deploy API Gateway with Observability
    runs-on: ubuntu-latest
    needs: [determine-environment, build-images]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ needs.determine-environment.outputs.gke_cluster }} \
          --region ${{ needs.determine-environment.outputs.gcp_region }} \
          --project ${{ needs.determine-environment.outputs.gcp_project }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Create namespace
      run: |
        kubectl create namespace ${{ needs.determine-environment.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy Observability Stack
      run: |
        # Deploy observability stack first
        helm upgrade --install observability-stack ./helm/observability-stack \
          --namespace ${{ needs.determine-environment.outputs.namespace }} \
          --create-namespace \
          --wait --timeout=10m

    - name: Create API Gateway secrets
      run: |
        # Create minimal secrets for API Gateway
        kubectl create secret generic api-gateway-secrets \
          --from-literal=api-keys="minimal-${{ needs.determine-environment.outputs.environment }}-key" \
          --namespace ${{ needs.determine-environment.outputs.namespace }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy API Gateway with observability
      run: |
        # Use environment-specific values file with observability enabled
        VALUES_FILE="values-${{ needs.determine-environment.outputs.environment }}.yaml"
        
        helm upgrade --install mis-cloud-native ./helm/mis-cloud-native \
          --namespace ${{ needs.determine-environment.outputs.namespace }} \
          --values ./helm/mis-cloud-native/$VALUES_FILE \
          --set global.environment=${{ needs.determine-environment.outputs.environment }} \
          --set global.gcp.projectId=${{ needs.determine-environment.outputs.gcp_project }} \
          --set global.gcp.region=${{ needs.determine-environment.outputs.gcp_region }} \
          --set global.gcp.cluster.name=${{ needs.determine-environment.outputs.gke_cluster }} \
          --set services.api-gateway.image="${{ env.IMAGE_REPOSITORY }}/api-gateway:${{ github.sha }}" \
          --set services.api-gateway.enabled=true \
          --set services.identity.enabled=false \
          --set services.product.enabled=false \
          --set services.cart.enabled=false \
          --set services.order.enabled=false \
          --set services.payment.enabled=false \
          --set observability.enabled=true \
          --set observability.prometheus.enabled=true \
          --set observability.grafana.enabled=true \
          --set observability.jaeger.enabled=true \
          --set observability.elk.enabled=true \
          --wait --timeout=10m

  # Job 5: Smoke Tests (Commented out for testing)
  # smoke-tests:
  #   name: Run Smoke Tests
  #   runs-on: ubuntu-latest
  #   needs: [determine-environment, deploy-gcp]
  #   if: github.event_name != 'pull_request'
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Authenticate to Google Cloud
  #     uses: google-github-actions/auth@v2
  #     with:
  #       credentials_json: ${{ secrets.GCP_SA_KEY }}

  #   - name: Set up Cloud SDK
  #     uses: google-github-actions/setup-gcloud@v2

  #   - name: Configure kubectl
  #     run: |
  #       gcloud container clusters get-credentials ${{ needs.determine-environment.outputs.gke_cluster }} \
  #         --region ${{ needs.determine-environment.outputs.gcp_region }} \
  #         --project ${{ needs.determine-environment.outputs.gcp_project }}

  #   - name: Wait for deployments
  #     run: |
  #       kubectl wait --for=condition=available --timeout=300s deployment --all -n ${{ needs.determine-environment.outputs.namespace }}

  #   - name: Run basic health checks
  #     run: |
  #       # Port forward to test API Gateway
  #       kubectl port-forward service/mis-cloud-native-api-gateway 8080:8080 -n ${{ needs.determine-environment.outputs.namespace }} &
  #       sleep 10

  #       # Test health endpoint
  #       curl -f http://localhost:8080/actuator/health || exit 1
  #       echo "✅ API Gateway health check passed"

  #       # Test with the environment profile
  #       echo "✅ Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"

  # Job 6: Notification (Commented out for testing)
  # notify:
  #   name: Notify Deployment Status
  #   runs-on: ubuntu-latest
  #   needs: [determine-environment, smoke-tests]
  #   if: always() && github.event_name != 'pull_request'
  #   steps:
  #     - name: Notify Success
  #       if: needs.smoke-tests.result == 'success'
  #       run: |
  #         echo "🎉 Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"
  #         echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
  #         echo "GCP Project: ${{ needs.determine-environment.outputs.gcp_project }}"
  #         echo "Cluster: ${{ needs.determine-environment.outputs.gke_cluster }}"
  #         echo "Namespace: ${{ needs.determine-environment.outputs.namespace }}"

  #     - name: Notify Failure
  #       if: needs.smoke-tests.result == 'failure' || needs.deploy-gcp.result == 'failure'
  #       run: |
  #         echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
  #         exit 1
