name: CI/CD Pipeline - Cloud Native Microservices

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip Test & Build job (use existing image)'
        required: false
        default: false
        type: boolean
      image_tag:
        description: 'Image tag to use when skipping build (e.g., ghcr.io/kayis-rahman/mis-cloud-native-research/api-gateway:latest)'
        required: false
        default: 'ghcr.io/kayis-rahman/mis-cloud-native-research/api-gateway:latest'
        type: string

env:
  REGISTRY: ghcr.io
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository -Xmx1024m
  IMAGE_REPOSITORY: ghcr.io/kayis-rahman/mis-cloud-native-research
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'mis-cloud-native-research' }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME || 'mis-cloud-native-gke' }}
  GCP_REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
  checks: write
  pull-requests: write
  actions: read

jobs:
  # Job 1: Test and Build - COMMENTED OUT FOR TESTING
  # test-and-build:
  #   name: Test & Build
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event_name != 'workflow_dispatch' || !inputs.skip_build }}
  #   outputs:
  #     image-tag: ${{ steps.set-image.outputs.image-tag }}
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'
  #
  #   - name: Cache Maven dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: ~/.m2/repository
  #       key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: |
  #         ${{ runner.os }}-maven-
  #
  #   - name: Setup Maven wrapper
  #     working-directory: ./services/api-gateway
  #     run: |
  #       if [ ! -f mvnw ]; then
  #         echo "Maven wrapper not found, generating..."
  #         mvn wrapper:wrapper
  #       fi
  #       chmod +x mvnw
  #
  #   - name: Run tests
  #     working-directory: ./services/api-gateway
  #     run: |
  #       ./mvnw clean test -Dspring.profiles.active=test -Djacoco.skip=true
  #     env:
  #       MAVEN_OPTS: -Xmx1024m
  #
  #   - name: Upload test results
  #     uses: dorny/test-reporter@v1
  #     if: always()
  #     with:
  #       name: Maven Tests - API Gateway
  #       path: services/api-gateway/target/surefire-reports/*.xml
  #       reporter: java-junit
  #       fail-on-error: false
  #
  #   - name: Build application
  #     if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
  #     working-directory: ./services/api-gateway
  #     run: |
  #       ./mvnw clean package -DskipTests -Djacoco.skip=true
  #     env:
  #       MAVEN_OPTS: -Xmx1024m
  #
  #   - name: Set up Docker Buildx
  #     if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
  #     uses: docker/setup-buildx-action@v3
  #
  #   - name: Extract metadata
  #     if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ${{ env.IMAGE_REPOSITORY }}/api-gateway
  #       tags: |
  #         type=ref,event=branch
  #         type=sha,prefix={{branch}}-
  #         type=raw,value=latest,enable={{is_default_branch}}
  #
  #   - name: Log in to Container Registry
  #     if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #
  #   - name: Build and push Docker image
  #     if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./services/api-gateway
  #       file: ./services/api-gateway/Dockerfile
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max
  #       platforms: linux/amd64
  #
  #   - name: Set single image tag
  #     if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
  #     id: set-image
  #     run: |
  #       # Extract the first tag from the multi-line output
  #       IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
  #       echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
  #       echo "Selected image tag: $IMAGE_TAG"

  # Job 2: Deploy Infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    # needs: [test-and-build]  # COMMENTED OUT - no dependency on test-and-build for now
    if: ${{ always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && !cancelled() }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "NAMESPACE=production" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "NAMESPACE=development" >> $GITHUB_ENV
        fi

    - name: Install GKE auth plugin
      if: env.GCP_SA_KEY != ''
      run: |
        # Install Google Cloud SDK repository and GKE auth plugin using modern GPG method
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get update
        sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin

    - name: Authenticate to Google Cloud
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        install_components: ''

    - name: Setup Terraform
      if: env.GCP_SA_KEY != ''
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Deploy Infrastructure with Terraform
      if: env.GCP_SA_KEY != ''
      working-directory: ./terraform
      run: |
        echo "🏗️ Deploying infrastructure..."
        terraform init
        terraform plan \
          -var="gcp_project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="environment=${{ env.ENVIRONMENT }}"
        terraform apply -auto-approve \
          -var="gcp_project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="environment=${{ env.ENVIRONMENT }}"
        echo "✅ Infrastructure deployment complete"

    - name: Infrastructure (Test Mode)
      if: env.GCP_SA_KEY == ''
      run: |
        echo "🔧 GCP credentials not configured, skipping infrastructure deployment..."
        echo "Would deploy:"
        echo "  - GKE Cluster"
        echo "  - VPC and Networking"
        echo "  - Cloud SQL databases"
        echo "  - Secret Manager"
        echo "✅ Infrastructure test mode complete"

  # Job 3: Deploy Observability
  deploy-observability:
    name: Deploy Observability
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: ${{ always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && !cancelled() }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "NAMESPACE=production" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "NAMESPACE=development" >> $GITHUB_ENV
        fi

    - name: Authenticate to Google Cloud
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        install_components: ''

    - name: Configure kubectl for GCP
      if: env.GCP_SA_KEY != ''
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Deploy Observability Stack
      if: env.GCP_SA_KEY != ''
      run: |
        echo "📊 Deploying cost-optimized observability stack..."
        
        kubectl create namespace observability --dry-run=client -o yaml | kubectl apply -f -
        
        # Label the observability namespace
        kubectl label namespace observability name=observability --overwrite=true
        
        # Deploy with performance-optimized settings
        helm upgrade --install observability-stack ./helm/observability-stack \
          --namespace observability \
          --set global.environment=${{ env.ENVIRONMENT }} \
          --set prometheus.resources.requests.memory=256Mi \
          --set prometheus.resources.requests.cpu=100m \
          --set prometheus.storage.size=5Gi \
          --set prometheus.config.scrapeInterval=15s \
          --set grafana.resources.requests.memory=128Mi \
          --set grafana.resources.requests.cpu=50m \
          --set grafana.storage.size=2Gi \
          --values ./helm/observability-stack/values.yaml \
          --wait --timeout=600s
        
        echo "✅ Performance-optimized observability stack deployed with SSD storage"

    - name: Observability (Test Mode)
      if: env.GCP_SA_KEY == ''
      run: |
        echo "🔧 GCP credentials not configured, skipping observability deployment..."
        echo "Would deploy:"
        echo "  - Prometheus"
        echo "  - Grafana"
        echo "  - ELK Stack"
        echo "  - Jaeger"
        echo "✅ Observability test mode complete"

  # Job 4: Deploy Backend Services
  deploy-backend-services:
    name: Deploy Backend Services
    runs-on: ubuntu-latest
    needs: [deploy-observability]
    if: ${{ always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && !cancelled() }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "NAMESPACE=production" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "NAMESPACE=development" >> $GITHUB_ENV
        fi

    - name: Authenticate to Google Cloud
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        install_components: ''

    - name: Configure kubectl for GCP
      if: env.GCP_SA_KEY != ''
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Deploy Backend Services
      if: env.GCP_SA_KEY != ''
      run: |
        echo "🔧 Deploying backend services..."
        
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy each service in dependency order
        for service in identity product cart order payment; do
          echo "Deploying $service service..."
          helm upgrade --install $service-${{ env.ENVIRONMENT }} ./helm/mis-cloud-native \
            --namespace ${{ env.NAMESPACE }} \
            --set global.environment=${{ env.ENVIRONMENT }} \
            --set services.$service.enabled=true \
            --values ./helm/mis-cloud-native/values-${{ env.ENVIRONMENT }}.yaml \
            --wait --timeout=300s
          echo "✅ $service service deployed"
        done
        
        echo "✅ All backend services deployment complete"

    - name: Backend Services (Test Mode)
      if: env.GCP_SA_KEY == ''
      run: |
        echo "🔧 GCP credentials not configured, skipping backend services deployment..."
        echo "Would deploy:"
        echo "  - Identity Service"
        echo "  - Product Service"
        echo "  - Cart Service"
        echo "  - Order Service"
        echo "  - Payment Service"
        echo "✅ Backend services test mode complete"

  # Job 5: Deploy API Gateway (Last)
  deploy-api-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: [deploy-backend-services]  # REMOVED test-and-build dependency
    if: ${{ always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && !cancelled() }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "NAMESPACE=production" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "NAMESPACE=development" >> $GITHUB_ENV
        fi
        
        # Use default image tag since test-and-build is commented out
        echo "IMAGE_TAG=${{ inputs.image_tag }}" >> $GITHUB_ENV
        echo "📦 Using default image: ${{ inputs.image_tag }}"

    - name: Authenticate to Google Cloud
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        install_components: ''

    - name: Configure kubectl for GCP
      if: env.GCP_SA_KEY != ''
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Validate Helm Chart
      run: |
        echo "🔍 Validating Helm chart..."
        helm lint ./helm/mis-cloud-native || echo "Helm lint completed with warnings"
        
        echo "🧪 Testing Helm template rendering..."
        helm template api-gateway-test ./helm/mis-cloud-native \
          --namespace test \
          --set global.environment=development \
          --set services.api-gateway.enabled=true \
          --set services.api-gateway.image="test:latest" \
          --values ./helm/mis-cloud-native/values-development.yaml \
          --dry-run > /tmp/deployment-preview.yaml
        
        echo "✅ Helm chart validation successful"

    - name: Deploy API Gateway to GCP
      if: env.GCP_SA_KEY != ''
      run: |
        echo "🚀 Deploying API Gateway (final step)..."
        echo "📦 Using image: ${{ env.IMAGE_TAG }}"
        
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        helm upgrade --install api-gateway-${{ env.ENVIRONMENT }} ./helm/mis-cloud-native \
          --namespace ${{ env.NAMESPACE }} \
          --set global.environment=${{ env.ENVIRONMENT }} \
          --set services.api-gateway.enabled=true \
          --set services.api-gateway.image=${{ env.IMAGE_TAG }} \
          --values ./helm/mis-cloud-native/values-${{ env.ENVIRONMENT }}.yaml \
          --wait --timeout=300s
        
        echo "✅ API Gateway deployment complete - Full stack is now deployed!"

    - name: API Gateway (Test Mode)
      if: env.GCP_SA_KEY == ''
      run: |
        echo "🔧 GCP credentials not configured, running in test mode..."
        echo "Would deploy API Gateway with:"
        echo "  Environment: ${{ env.ENVIRONMENT }}"
        echo "  Namespace: ${{ env.NAMESPACE }}"
        echo "  Image: ${{ env.IMAGE_TAG }}"
        echo "  Build Skipped: ${{ inputs.skip_build }}"
        echo "✅ API Gateway test mode complete"

    - name: Generate deployment summary
      run: |
        echo "## 🚀 Complete Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Environment |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure | ✅ Deployed | ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Observability | ✅ Deployed | ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Services | ✅ Deployed | ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| API Gateway | ✅ Deployed | ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Full cloud-native microservices stack is now live!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
