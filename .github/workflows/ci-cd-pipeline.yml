name: CI/CD Pipeline - Cloud Native Microservices

on:
  push:
    branches: [ main, develop ]
    # Remove overly restrictive paths filter to prevent workflow skipping
    # paths:
    #   - 'services/**'
    #   - 'helm/**'
    #   - 'terraform/**'
    #   - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    # Keep paths filter for PRs to avoid unnecessary runs
    paths:
      - 'services/**'
      - 'helm/**'
      - 'terraform/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
      services:
        description: 'Services to deploy (space-separated, or "all")'
        required: false
        default: 'api-gateway'
      deploy_observability:
        description: 'Deploy observability stack only'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  IMAGE_REPOSITORY: ghcr.io/kayis-rahman/mis-cloud-native-research
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'mis-cloud-native-research' }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME || 'mis-cloud-native-gke' }}
  GCP_REGION: ${{ secrets.GCP_REGION || 'us-central1' }}

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security Checks
    runs-on: ubuntu-latest
    # Simplified condition - run for PRs or manual dispatch
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run Maven tests for API Gateway
      working-directory: ./services/api-gateway
      run: |
        chmod +x mvnw
        ./mvnw clean test
        ./mvnw jacoco:report

    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests - API Gateway
        path: services/api-gateway/target/surefire-reports/*.xml
        reporter: java-junit

    - name: Run security scan on code (optional)
      run: |
        if [ -f "scripts/scan_secrets.sh" ]; then
          chmod +x scripts/scan_secrets.sh
          ./scripts/scan_secrets.sh
        else
          echo "Secret scanning script not found, skipping..."
        fi

  # Job 2: Build and Push Container Images
  build-images:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    # Always run for push events, skip for PRs
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_REPOSITORY }}/api-gateway
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and test in Docker
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./services/api-gateway
        file: ./services/api-gateway/Dockerfile
        target: test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push final image
      uses: docker/build-push-action@v5
      with:
        context: ./services/api-gateway
        file: ./services/api-gateway/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        platforms: linux/amd64

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy API Gateway (Simplified)
  deploy-api-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "NAMESPACE=production" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "NAMESPACE=development" >> $GITHUB_ENV
        fi

    - name: Authenticate to Google Cloud
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      if: env.GCP_SA_KEY != ''
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Install gke-gcloud-auth-plugin
      if: env.GCP_SA_KEY != ''
      run: |
        gcloud components install gke-gcloud-auth-plugin --quiet

    - name: Configure kubectl
      if: env.GCP_SA_KEY != ''
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GCP_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Deploy API Gateway with Helm (Local/Testing)
      if: env.GCP_SA_KEY == ''
      run: |
        echo "üîß GCP credentials not configured, running in test mode..."
        echo "Would deploy API Gateway with:"
        echo "  Environment: ${{ env.ENVIRONMENT }}"
        echo "  Namespace: ${{ env.NAMESPACE }}"
        echo "  Image: ${{ needs.build-images.outputs.image-tag }}"
        
        # Validate Helm chart
        helm lint ./helm/mis-cloud-native
        
        # Dry run deployment
        helm template api-gateway-${{ env.ENVIRONMENT }} ./helm/mis-cloud-native \
          --namespace ${{ env.NAMESPACE }} \
          --set global.environment=${{ env.ENVIRONMENT }} \
          --set services.api-gateway.enabled=true \
          --set services.api-gateway.image=${{ needs.build-images.outputs.image-tag }} \
          --values ./helm/mis-cloud-native/values-${{ env.ENVIRONMENT }}.yaml \
          --dry-run > deployment-preview.yaml
        
        echo "‚úÖ Helm chart validation successful"

    - name: Deploy API Gateway with Helm (GCP)
      if: env.GCP_SA_KEY != ''
      run: |
        echo "üöÄ Deploying API Gateway to GCP..."
        
        # Create namespace
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm
        helm upgrade --install api-gateway-${{ env.ENVIRONMENT }} ./helm/mis-cloud-native \
          --namespace ${{ env.NAMESPACE }} \
          --set global.environment=${{ env.ENVIRONMENT }} \
          --set global.gcp.projectId=${{ env.GCP_PROJECT_ID }} \
          --set global.gcp.cluster.name=${{ env.GKE_CLUSTER }} \
          --set global.imageRegistry=${{ env.REGISTRY }} \
          --set services.api-gateway.enabled=true \
          --set services.api-gateway.image=${{ needs.build-images.outputs.image-tag }} \
          --set services.api-gateway.replicaCount=${{ env.ENVIRONMENT == 'production' && '2' || '1' }} \
          --values ./helm/mis-cloud-native/values-${{ env.ENVIRONMENT }}.yaml \
          --wait --timeout=300s

    - name: Verify deployment
      if: env.GCP_SA_KEY != ''
      run: |
        echo "üîç Verifying API Gateway deployment in ${{ env.ENVIRONMENT }} environment..."
        
        # Check pods
        kubectl get pods -n ${{ env.NAMESPACE }} -l app.kubernetes.io/component=api-gateway || echo "No pods found yet"
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          -l app.kubernetes.io/component=api-gateway \
          -n ${{ env.NAMESPACE }} --timeout=300s || echo "Pods not ready within timeout"
        
        # Check services
        kubectl get services -n ${{ env.NAMESPACE }} -l app.kubernetes.io/component=api-gateway || echo "No services found yet"

    - name: Run smoke tests
      run: |
        if [ -f "scripts/smoke_test_a_service.sh" ]; then
          chmod +x scripts/smoke_test_a_service.sh
          ./scripts/smoke_test_a_service.sh api-gateway ${{ env.ENVIRONMENT }} || echo "Smoke tests failed or not available"
        else
          echo "Smoke test script not found, skipping..."
        fi

  # Job 4: Simple validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-api-gateway]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Deployment Summary
      run: |
        echo "üéâ API Gateway Deployment Summary"
        echo "================================"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
        echo "Image: ${{ needs.deploy-api-gateway.needs.build-images.outputs.image-tag }}"
        echo "Timestamp: $(date)"
        echo "Git Ref: ${{ github.ref }}"
        echo "Git SHA: ${{ github.sha }}"
