name: CI-CD

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment (development|staging|production)"
        required: false
        default: "development"
      helm_values_file:
        description: "Optional Helm values file (e.g., helm/mis-cloud-native/values-development.yaml)"
        required: false
        default: "helm/mis-cloud-native/values-development.yaml"

permissions:
  contents: read
  packages: write
  id-token: write

# SECRETS REQUIRED (set in repo or org settings):
# - GHCR_TOKEN (optional): If not set, the built-in GITHUB_TOKEN will be used for GHCR auth
# - KUBECONFIG_B64: Base64-encoded kubeconfig for the target cluster
# - HELM_KUBE_NAMESPACE (optional): Namespace to deploy into (defaults to value in chart or 'default')
# - GCP_SA_KEY (optional): If you prefer GKE auth via OIDC/Workload Identity instead of kubeconfig (not used by default)
#
# NOTES:
# - Images are tagged with the GitHub SHA.
# - Workflow builds and tests each microservice with a matrix.
# - Trivy scan fails the build on HIGH/CRITICAL vulnerabilities.
# - Deployment uses Helm to apply per-service image overrides with the SHA tag.
#
# EXTENSIONS RECOMMENDATIONS:
# - Add environments with required reviewers for staging/production (environment protection rules).
# - Add a manual approval gate via environments.
# - Implement canary by using an additional Helm values file or flags (e.g., separate release name or canary annotations).
# - Add SBOM generation (syft) and attestations (cosign) for supply chain integrity.
# - Cache Maven with actions/cache for faster builds.

env:
  REGISTRY: ghcr.io
  # The repo path in GHCR will be lower-cased
  REPO: ${{ github.repository }}
  SHA: ${{ github.sha }}
  CHART_PATH: helm/mis-cloud-native

jobs:
  discover-services:
    name: Discover services
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        name: Build services matrix JSON
        run: |
          # Static list based on repo structure (adjust if needed)
          services=(api-gateway product cart order payment identity)
          json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s '{service: .}')
          echo "matrix=${json}" >> $GITHUB_OUTPUT

  test-build-scan:
    name: Test, Build and Scan (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: discover-services
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-services.outputs.matrix) }}
    env:
      SERVICE: ${{ matrix.service }}
      IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ matrix.service }}:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java (Maven)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run unit & integration tests (mvn verify)
        working-directory: services/${{ env.SERVICE }}
        run: mvn -B -U -DskipTests=false verify

      - name: Upload surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-${{ env.SERVICE }}
          path: |
            services/${{ env.SERVICE }}/target/surefire-reports/**/*
            services/${{ env.SERVICE }}/target/failsafe-reports/**/*
          if-no-files-found: ignore

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      - name: Build image (local) for scan
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/${{ env.SERVICE }}/Dockerfile
          push: false
          load: true
          tags: ${{ env.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ env.SERVICE }}

      - name: Trivy scan (image)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          ignore-unfixed: true

      - name: Push image to GHCR (after scan)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/${{ env.SERVICE }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ env.SERVICE }}

  deploy:
    name: Helm deploy
    runs-on: ubuntu-latest
    needs: [test-build-scan]
    if: >-
      ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    env:
      IMAGE_SHA: ${{ github.sha }}
      NAMESPACE: ${{ secrets.HELM_KUBE_NAMESPACE || 'default' }}
      VALUES_FILE: ${{ github.event.inputs.helm_values_file || 'helm/mis-cloud-native/values-development.yaml' }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
      REGISTRY: ghcr.io
      OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.4'

      - name: Configure kubeconfig from secret
        shell: bash
        run: |
          if [ -z "${{ secrets.KUBECONFIG_B64 }}" ]; then
            echo "KUBECONFIG_B64 secret is not set; skipping deploy." >&2
            exit 0
          fi
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/kubeconfig
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

      - name: kubectl cluster-info (sanity)
        run: kubectl cluster-info

      - name: Create namespace if not exists
        run: |
          kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create namespace "$NAMESPACE"

      - name: Helm upgrade --install (all services with SHA images)
        run: |
          CHART=${{ env.CHART_PATH }}
          RELEASE=mis-cloud-native
          REGISTRY=${{ env.REGISTRY }}
          OWNER_LC=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          REPO_LC=$(echo "${{ env.REPO_NAME }}" | tr '[:upper:]' '[:lower:]')
          SHA=${{ env.IMAGE_SHA }}

          # Build --set overrides for each service image
          set_args=(
            --namespace "$NAMESPACE"
            -f "$VALUES_FILE"
            --set global.environment="$ENVIRONMENT"
            --set services.api-gateway.image="$REGISTRY/$OWNER_LC/$REPO_LC/api-gateway:$SHA"
            --set services.product.image="$REGISTRY/$OWNER_LC/$REPO_LC/product:$SHA"
            --set services.cart.image="$REGISTRY/$OWNER_LC/$REPO_LC/cart:$SHA"
            --set services.order.image="$REGISTRY/$OWNER_LC/$REPO_LC/order:$SHA"
            --set services.payment.image="$REGISTRY/$OWNER_LC/$REPO_LC/payment:$SHA"
            --set services.identity.image="$REGISTRY/$OWNER_LC/$REPO_LC/identity:$SHA"
          )

          helm upgrade --install "$RELEASE" "$CHART" "${set_args[@]}" --wait --timeout 10m

      - name: Show rollout status
        run: |
          kubectl get deploy -n "$NAMESPACE"
          kubectl get svc -n "$NAMESPACE"

    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
