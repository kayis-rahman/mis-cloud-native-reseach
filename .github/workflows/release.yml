name: Release Management

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
      environment:
        description: 'Target environment for release'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      release_notes:
        description: 'Release notes'
        required: false

env:
  REGISTRY: ghcr.io
  GHCR_OWNER: ${{ github.repository_owner }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      release-tag: ${{ steps.create_tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create and push tag
      id: create_tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
        git push origin "${{ github.event.inputs.version }}"
        echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && (github.event_name == 'push' || needs.create-release.result == 'success')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set release version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build all services
      run: |
        for service in identity product cart order payment api-gateway; do
          echo "Building $service..."
          cd services/$service
          mvn clean package -DskipTests -B
          cd ../..
        done

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push release images
      run: |
        chmod +x scripts/docker-build-all.sh
        export GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
        export TAG=${{ env.RELEASE_VERSION }}
        ./scripts/docker-build-all.sh

    - name: Security scan release images
      run: |
        chmod +x scripts/scan_security.sh
        for service in identity product cart order payment api-gateway; do
          echo "Scanning release image: ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${service}:${{ env.RELEASE_VERSION }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/${service}:${{ env.RELEASE_VERSION }}" \
            NO_PROGRESS=1 ./scripts/scan_security.sh
        done

    - name: Generate release manifest
      run: |
        cat << EOF > release-manifest.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: release-info
          namespace: default
        data:
          version: "${{ env.RELEASE_VERSION }}"
          build-date: "$(date -u)"
          commit-sha: "${{ github.sha }}"
          images: |
            identity: ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/identity:${{ env.RELEASE_VERSION }}
            product: ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/product:${{ env.RELEASE_VERSION }}
            cart: ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/cart:${{ env.RELEASE_VERSION }}
            order: ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/order:${{ env.RELEASE_VERSION }}
            payment: ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/payment:${{ env.RELEASE_VERSION }}
            api-gateway: ${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/api-gateway:${{ env.RELEASE_VERSION }}
        EOF

    - name: Package Helm chart
      run: |
        helm package helm/mis-cloud-native --version ${{ env.RELEASE_VERSION }} --app-version ${{ env.RELEASE_VERSION }}

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ env.RELEASE_VERSION }}
        path: |
          release-manifest.yaml
          mis-cloud-native-${{ env.RELEASE_VERSION }}.tgz

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: build-release
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set release version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" ]]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        fi
        chmod 600 ~/.kube/config

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Deploy release
      run: |
        chmod +x scripts/deploy_all_services.sh
        export GLOBAL_REGISTRY="${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}"
        export TAG=${{ env.RELEASE_VERSION }}
        ./scripts/deploy_all_services.sh

    - name: Apply release manifest
      run: |
        kubectl apply -f release-manifest.yaml

    - name: Validate release deployment
      run: |
        chmod +x scripts/validate_deploy.sh
        for service in identity product cart order payment api-gateway; do
          SERVICE=$service ./scripts/validate_deploy.sh
        done

    - name: Run release smoke tests
      run: |
        chmod +x scripts/smoke_test_all_services.sh
        ./scripts/smoke_test_all_services.sh

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, deploy-release]
    if: always() && needs.build-release.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set release version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-${{ env.RELEASE_VERSION }}

    - name: Generate release notes
      run: |
        cat << EOF > release-notes.md
        # Release ${{ env.RELEASE_VERSION }}
        
        ## Changes
        ${{ github.event.inputs.release_notes || 'See commit history for detailed changes.' }}
        
        ## Container Images
        - \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/identity:${{ env.RELEASE_VERSION }}\`
        - \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/product:${{ env.RELEASE_VERSION }}\`
        - \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/cart:${{ env.RELEASE_VERSION }}\`
        - \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/order:${{ env.RELEASE_VERSION }}\`
        - \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/payment:${{ env.RELEASE_VERSION }}\`
        - \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/api-gateway:${{ env.RELEASE_VERSION }}\`
        
        ## Deployment Status
        - Build: ✅ Success
        - Security Scan: ✅ Passed
        - Deployment: ${{ needs.deploy-release.result == 'success' && '✅ Success' || '❌ Failed' }}
        
        ## Installation
        \`\`\`bash
        helm install mis-cloud-native ./mis-cloud-native-${{ env.RELEASE_VERSION }}.tgz
        \`\`\`
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        name: Release ${{ env.RELEASE_VERSION }}
        body_path: release-notes.md
        files: |
          mis-cloud-native-${{ env.RELEASE_VERSION }}.tgz
          release-manifest.yaml
        draft: false
        prerelease: false
