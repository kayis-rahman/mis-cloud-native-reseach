# COMMENTED OUT FOR TESTING - release.yml
# name: Release Management

# on:
#   push:
#     tags:
#     - 'v*'
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Release version (e.g., v1.0.0)'
#         required: true
#       environment:
#         description: 'Target environment for release'
#         required: true
#         default: 'production'
#         type: choice
#         options:
#         - staging
#         - production
#       release_notes:
#         description: 'Release notes'
#         required: false

# env:
#   REGISTRY: ghcr.io
#   GHCR_OWNER: ${{ github.repository_owner }}

# jobs:
#   create-release:
#     name: Create Release
#     runs-on: ubuntu-latest
#     if: github.event_name == 'workflow_dispatch'
#     outputs:
#       release-tag: ${{ steps.create_tag.outputs.tag }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Create and push tag
#       id: create_tag
#       run: |
#         git config user.name "github-actions[bot]"
#         git config user.email "github-actions[bot]@users.noreply.github.com"
#         git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
#         git push origin "${{ github.event.inputs.version }}"
#         echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

#   build-release:
#     name: Build Release Artifacts
#     runs-on: ubuntu-latest
#     needs: create-release
#     if: always() && (github.event_name == 'push' || needs.create-release.result == 'success')
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set release version
#       run: |
#         if [[ "${{ github.event_name }}" == "push" ]]; then
#           echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
#         else
#           echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
#         fi

#     - name: Set up JDK 17
#       uses: actions/setup-java@v4
#       with:
#         java-version: '17'
#         distribution: 'temurin'

#     - name: Cache Maven dependencies
#       uses: actions/cache@v4
#       with:
#         path: .m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-

#     - name: Build all services
#       run: |
#         for service in identity product cart order payment api-gateway; do
#           echo "Building $service..."
#           cd services/$service
#           mvn clean package -DskipTests -B
#           cd ../..
#         done

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Log in to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ${{ env.REGISTRY }}
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}

#     - name: Build and push release images
#       run: |
#         for service in identity product cart order payment api-gateway; do
#           echo "Building release image for $service..."
#           cd services/$service
#
#           # Build with release tag
#           docker build -t "${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-$service:${{ env.RELEASE_VERSION }}" .
#           docker build -t "${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-$service:latest" .
#
#           # Push images
#           docker push "${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-$service:${{ env.RELEASE_VERSION }}"
#           docker push "${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-$service:latest"
#
#           cd ../..
#         done

#   deploy-release:
#     name: Deploy Release
#     runs-on: ubuntu-latest
#     needs: build-release
#     environment: ${{ github.event.inputs.environment || 'production' }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set release version
#       run: |
#         if [[ "${{ github.event_name }}" == "push" ]]; then
#           echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
#         else
#           echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
#         fi

#     - name: Configure kubectl
#       run: |
#         mkdir -p ~/.kube
#         if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" ]]; then
#           echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
#         else
#           echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
#         fi
#         chmod 600 ~/.kube/config

#     - name: Setup Helm
#       uses: azure/setup-helm@v3
#       with:
#         version: '3.12.0'

#     - name: Deploy release
#       run: |
#         # Use production values for release
#         helm upgrade --install mis-cloud-native ./helm/mis-cloud-native \
#           --namespace production \
#           --values ./helm/mis-cloud-native/values-production.yaml \
#           --set global.version=${{ env.RELEASE_VERSION }} \
#           --set global.environment=production \
#           --wait --timeout=10m

#   create-github-release:
#     name: Create GitHub Release
#     runs-on: ubuntu-latest
#     needs: [build-release, deploy-release]
#     if: always() && needs.build-release.result == 'success'
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set release version
#       run: |
#         if [[ "${{ github.event_name }}" == "push" ]]; then
#           echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
#         else
#           echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
#         fi

#     - name: Generate release notes
#       run: |
#         cat << EOF > release-notes.md
#         # Release ${{ env.RELEASE_VERSION }}

#         ${{ github.event.inputs.release_notes || 'Automated release' }}

#         ## Changes
#         - API Gateway improvements
#         - Service updates
#         - Infrastructure enhancements

#         ## Container Images
#         - identity: \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-identity:${{ env.RELEASE_VERSION }}\`
#         - product: \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-product:${{ env.RELEASE_VERSION }}\`
#         - cart: \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-cart:${{ env.RELEASE_VERSION }}\`
#         - order: \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-order:${{ env.RELEASE_VERSION }}\`
#         - payment: \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-payment:${{ env.RELEASE_VERSION }}\`
#         - api-gateway: \`${{ env.REGISTRY }}/${{ env.GHCR_OWNER }}/mis-cloud-native-api-gateway:${{ env.RELEASE_VERSION }}\`

#         ## Deployment Status
#         - Environment: ${{ github.event.inputs.environment || 'production' }}
#         - Deployment: ${{ needs.deploy-release.result == 'success' && '✅ Successful' || '❌ Failed' }}
#         EOF

#     - name: Create GitHub Release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: ${{ env.RELEASE_VERSION }}
#         release_name: Release ${{ env.RELEASE_VERSION }}
#         body_path: release-notes.md
#         draft: false
#         prerelease: false
