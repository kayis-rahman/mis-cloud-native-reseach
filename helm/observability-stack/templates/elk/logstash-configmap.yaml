{{- if .Values.logstash.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: {{ include "observability-stack.namespace" . }}
  labels:
    {{- include "observability-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: logstash
data:
  logstash.conf: |
    input {
      tcp {
        port => 5000
        codec => json_lines
      }
      beats {
        port => 5044
      }
    }

    filter {
      # Parse JSON logs
      if [message] {
        json {
          source => "message"
        }
      }

      # Add timestamp if not present
      if ![timestamp] {
        ruby {
          code => "event.set('timestamp', Time.now.utc.iso8601)"
        }
      }

      # Parse service name from logger or service field
      if [service] {
        mutate {
          add_field => { "service_name" => "%{service}" }
        }
      } else if [logger_name] {
        grok {
          match => { "logger_name" => "^com\.sparkage\.(?<service_name>[^\.]+)" }
        }
      }

      # Add environment information
      mutate {
        add_field => { 
          "environment" => "{{ .Values.global.environment | default "development" }}"
          "cluster" => "{{ .Values.global.cluster | default "local" }}"
        }
      }

      # Parse trace information for correlation
      if [traceId] and [traceId] != "" {
        mutate {
          add_field => { "trace_id" => "%{traceId}" }
        }
      }

      if [spanId] and [spanId] != "" {
        mutate {
          add_field => { "span_id" => "%{spanId}" }
        }
      }
    }

    output {
      elasticsearch {
        hosts => ["elasticsearch-service:9200"]
        index => "microservices-logs-%{+YYYY.MM.dd}"
        template_name => "microservices"
        template => {
          "index_patterns" => ["microservices-logs-*"]
          "settings" => {
            "number_of_shards" => 1
            "number_of_replicas" => 0
          }
          "mappings" => {
            "properties" => {
              "@timestamp" => { "type" => "date" }
              "timestamp" => { "type" => "date" }
              "level" => { "type" => "keyword" }
              "logger_name" => { "type" => "keyword" }
              "service_name" => { "type" => "keyword" }
              "environment" => { "type" => "keyword" }
              "cluster" => { "type" => "keyword" }
              "trace_id" => { "type" => "keyword" }
              "span_id" => { "type" => "keyword" }
              "message" => { "type" => "text" }
              "stack_trace" => { "type" => "text" }
            }
          }
        }
        template_overwrite => true
      }
      
      # Output to stdout for debugging
      stdout {
        codec => rubydebug
      }
    }

  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    pipeline.workers: 2
    pipeline.output.workers: 2
    pipeline.batch.size: 125
    pipeline.batch.delay: 50
    xpack.monitoring.enabled: false
{{- end }}
