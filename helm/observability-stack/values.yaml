# Global configuration
global:
  namespace: observability
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Namespace configuration
namespace:
  create: true
  name: observability

# Prometheus configuration
prometheus:
  enabled: true
  image:
    repository: prom/prometheus
    tag: v2.45.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090
    annotations: {}

  resources:
    requests:
      memory: "256Mi"  # Increased from 128Mi for better performance
      cpu: "100m"      # Increased from 50m for better performance
    limits:
      memory: "512Mi"  # Increased from 256Mi for better performance
      cpu: "200m"      # Increased from 100m for better performance

  storage:
    size: 5Gi         # Increased from 2Gi for better data retention
    storageClass: "fast-ssd"  # Use SSD storage class for performance

  config:
    scrapeInterval: 15s  # Reduced from 30s for better monitoring resolution
    evaluationInterval: 15s  # Reduced from 30s for better monitoring resolution
    retention: 3d        # Keep at 3 days as requested

# Grafana configuration
grafana:
  enabled: true
  image:
    repository: grafana/grafana
    tag: 10.0.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000

  admin:
    user: "admin"
    password: "admin123"  # Change this in production

  resources:
    requests:
      memory: "128Mi"  # Increased from 64Mi for better performance
      cpu: "50m"       # Increased from 25m for better performance
    limits:
      memory: "256Mi"  # Increased from 128Mi for better performance
      cpu: "100m"      # Increased from 50m for better performance

  storage:
    size: 2Gi  # Increased from 1Gi for better dashboard storage
    storageClass: "fast-ssd"  # Use SSD storage class for performance

# Elasticsearch configuration
elasticsearch:
  enabled: true
  image:
    repository: docker.elastic.co/elasticsearch/elasticsearch
    tag: 8.8.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 9200
    targetPort: 9200
    annotations: {}

  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  storage:
    size: 5Gi

  config:
    heapSize: "256m"
    securityEnabled: false

# Logstash configuration
logstash:
  enabled: true
  image:
    repository: docker.elastic.co/logstash/logstash
    tag: 8.8.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    tcpPort: 5000
    httpPort: 9600
    annotations: {}

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

  config:
    heapSize: "256m"

# Kibana configuration
kibana:
  enabled: true
  image:
    repository: docker.elastic.co/kibana/kibana
    tag: 8.8.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 5601
    targetPort: 5601
    annotations: {}

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

# Jaeger configuration
jaeger:
  enabled: true
  image:
    repository: jaegertracing/all-in-one
    tag: 1.47
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    uiPort: 16686
    collectorHttpPort: 14268
    collectorGrpcPort: 14250
    agentUdpPort: 6831
    agentUdpCompactPort: 6832
    annotations: {}

  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "100m"

  config:
    storageType: memory
    samplerType: const
    samplerParam: 1

# Service Discovery Configuration for microservices
serviceDiscovery:
  microservices:
    - name: api-gateway
      namespace: default
      metricsPath: /actuator/prometheus
      port: 8080
    - name: product-service
      namespace: default
      metricsPath: /actuator/prometheus
      port: 8081
    - name: cart-service
      namespace: default
      metricsPath: /actuator/prometheus
      port: 8082
    - name: order-service
      namespace: default
      metricsPath: /actuator/prometheus
      port: 8083
    - name: payment-service
      namespace: default
      metricsPath: /actuator/prometheus
      port: 8084
    - name: identity-service
      namespace: default
      metricsPath: /actuator/prometheus
      port: 8085

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: grafana.local
      paths:
        - path: /
          pathType: Prefix
          service: grafana
    - host: prometheus.local
      paths:
        - path: /
          pathType: Prefix
          service: prometheus
    - host: kibana.local
      paths:
        - path: /
          pathType: Prefix
          service: kibana
    - host: jaeger.local
      paths:
        - path: /
          pathType: Prefix
          service: jaeger
  tls: []

# Node selector, tolerations and affinity
nodeSelector: {}
tolerations: []
affinity: {}
