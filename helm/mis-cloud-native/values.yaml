global:
  imagePullPolicy: IfNotPresent
  imageRegistry: "ghcr.io"
  # Environment configuration - will be overridden by Helm during deployment
  environment: "production"  # Can be: development, staging, production
  # GCP Configuration
  gcp:
    projectId: ""  # Will be set via GitHub Actions
    region: "us-central1"
    cluster:
      name: ""  # Will be set via GitHub Actions
      zone: "us-central1-a"
  # Ingress global control
  ingress:
    enabled: true
    className: "gce"
    hosts: []
    tls: []
    # If true, expose api-gateway at root path "/" instead of "/api-gateway"
    gatewayRoot: false

# Environment-specific overrides
environments:
  development:
    replicaCount: 1
    resources:
      requests:
        memory: "256Mi"  # Increased from 128Mi for better performance
        cpu: "100m"      # Increased from 50m for better performance
      limits:
        memory: "512Mi"  # Increased from 256Mi for better performance
        cpu: "200m"      # Increased from 100m for better performance
  staging:
    replicaCount: 1
    resources:
      requests:
        memory: "512Mi"  # Increased for performance
        cpu: "200m"      # Increased for performance
      limits:
        memory: "1Gi"    # Increased for performance
        cpu: "400m"      # Increased for performance
  production:
    replicaCount: 1      # Single replica as requested
    resources:
      requests:
        memory: "512Mi"  # Increased for performance
        cpu: "250m"      # Increased for performance
      limits:
        memory: "1Gi"    # Increased for performance
        cpu: "500m"      # Increased for performance


# Define microservices here
services:
  api-gateway:
    enabled: true
    name: api-gateway
    image: "ghcr.io/kayis-rahman/mis-cloud-native-research/api-gateway:latest"
    replicaCount: 1
    containerPort: 8080
    usesDb: false
    service:
      type: ClusterIP
      port: 8080
      targetPort: 8080
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # API Gateway specific configurations
    security:
      apiKeys: "gateway-key-please-change-in-production"
      headerName: "X-API-Key"
    rateLimit:
      replenishRate: 10
      burstCapacity: 20
    # Service discovery URIs (use Kubernetes service names)
    serviceUris:
      identity: "http://identity-service:8085"
      product: "http://product-service:8081"
      cart: "http://cart-service:8082"
      order: "http://order-service:8083"
      payment: "http://payment-service:8084"
    env:
      # Use environment-specific profile
      - name: SPRING_PROFILES_ACTIVE
        value: "{{ .Values.global.environment }}"
      - name: SECURITY_API_KEYS
        valueFrom:
          secretKeyRef:
            name: api-gateway-security
            key: apiKeys
      - name: SECURITY_HEADER_NAME
        value: "{{ index .Values.services \"api-gateway\" \"security\" \"headerName\" }}"
      - name: RATELIMIT_REPLENISH_RATE
        value: "{{ index .Values.services \"api-gateway\" \"rateLimit\" \"replenishRate\" }}"
      - name: RATELIMIT_BURST_CAPACITY
        value: "{{ index .Values.services \"api-gateway\" \"rateLimit\" \"burstCapacity\" }}"
      # Service URIs
      - name: IDENTITY_URI
        value: "{{ index .Values.services \"api-gateway\" \"serviceUris\" \"identity\" }}"
      - name: PRODUCT_URI
        value: "{{ index .Values.services \"api-gateway\" \"serviceUris\" \"product\" }}"
      - name: CART_URI
        value: "{{ index .Values.services \"api-gateway\" \"serviceUris\" \"cart\" }}"
      - name: ORDER_URI
        value: "{{ index .Values.services \"api-gateway\" \"serviceUris\" \"order\" }}"
      - name: PAYMENT_URI
        value: "{{ index .Values.services \"api-gateway\" \"serviceUris\" \"payment\" }}"
      # Redis for rate limiting (optional, falls back to in-memory)
      - name: SPRING_REDIS_HOST
        value: "redis-service.{{ .Values.global.environment }}"
      - name: SPRING_REDIS_PORT
        value: "6379"
      # Downward API for namespace (used in OTEL resource attributes)
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      # OpenTelemetry tracing to in-cluster Alloy receiver (OTLP/HTTP)
      - name: OTEL_SERVICE_NAME
        value: "api-gateway"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "service.name=api-gateway,service.namespace=$(POD_NAMESPACE),deployment.environment={{ .Values.global.environment }}"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318"
      - name: OTEL_PROPAGATORS
        value: "tracecontext,baggage"
    startupProbe:
      path: /actuator/health/liveness
      # Allow up to ~2 minutes for cold start (5s period * 24 failures = 120s)
      initialDelaySeconds: 0
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 24
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    networkPolicy:
      enabled: true
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  name: "{{ .Values.global.environment }}"
      egress:
        - to: []    # Allow all egress (can be restricted later)
          ports:
            - port: 53
              protocol: UDP
            - port: 53
              protocol: TCP
            - port: 8081  # Product service
              protocol: TCP
            - port: 8082  # Cart service
              protocol: TCP
            - port: 8083  # Order service
              protocol: TCP
            - port: 8084  # Payment service
              protocol: TCP
            - port: 8085  # Identity service
              protocol: TCP
            - port: 6379  # Redis
              protocol: TCP

  identity:
    enabled: true
    name: identity-service
    image: "identity:latest"
    replicaCount: 1
    containerPort: 8085
    usesDb: true
    service:
      type: ClusterIP
      port: 8085
    resources:
      requests:
        memory: "256Mi"  # Increased for better performance
        cpu: "100m"      # Increased for better performance
      limits:
        memory: "512Mi"  # Increased for better performance
        cpu: "200m"      # Increased for better performance
    env:
      - name: SPRING_PROFILES_ACTIVE
        value: "{{ .Values.global.environment }}"
      # Downward API for namespace (used in OTEL resource attributes)
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      # OpenTelemetry tracing to in-cluster Alloy receiver (OTLP/HTTP)
      - name: OTEL_SERVICE_NAME
        value: "identity-service"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "service.name=identity-service,service.namespace=$(POD_NAMESPACE),deployment.environment={{ .Values.global.environment }}"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318"
      - name: OTEL_PROPAGATORS
        value: "tracecontext,baggage"
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 20
      periodSeconds: 10

  product:
    enabled: true
    name: product-service
    image: "product:latest"
    replicaCount: 1
    containerPort: 8081
    usesDb: true
    service:
      type: ClusterIP
      port: 8081
    resources:
      requests:
        memory: "256Mi"  # Increased for better performance
        cpu: "100m"      # Increased for better performance
      limits:
        memory: "512Mi"  # Increased for better performance
        cpu: "200m"      # Increased for better performance
    env:
      - name: SPRING_PROFILES_ACTIVE
        value: "{{ .Values.global.environment }}"
      # Downward API for namespace (used in OTEL resource attributes)
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      # OpenTelemetry tracing to in-cluster Alloy receiver (OTLP/HTTP)
      - name: OTEL_SERVICE_NAME
        value: "product-service"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "service.name=product-service,service.namespace=$(POD_NAMESPACE),deployment.environment={{ .Values.global.environment }}"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318"
      - name: OTEL_PROPAGATORS
        value: "tracecontext,baggage"
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  cart:
    enabled: true
    name: cart-service
    image: "cart:latest"
    replicaCount: 1
    containerPort: 8083
    usesDb: true
    service:
      type: ClusterIP
      port: 8083
    resources:
      requests:
        memory: "256Mi"  # Increased for better performance
        cpu: "100m"      # Increased for better performance
      limits:
        memory: "512Mi"  # Increased for better performance
        cpu: "200m"      # Increased for better performance
    env:
      - name: SPRING_PROFILES_ACTIVE
        value: "{{ .Values.global.environment }}"
      # Downward API for namespace (used in OTEL resource attributes)
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      # OpenTelemetry tracing to in-cluster Alloy receiver (OTLP/HTTP)
      - name: OTEL_SERVICE_NAME
        value: "cart-service"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "service.name=cart-service,service.namespace=$(POD_NAMESPACE),deployment.environment={{ .Values.global.environment }}"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318"
      - name: OTEL_PROPAGATORS
        value: "tracecontext,baggage"
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  order:
    enabled: true
    name: order-service
    image: "order:latest"
    replicaCount: 1
    containerPort: 8082
    usesDb: true
    service:
      type: ClusterIP
      port: 8082
    resources:
      requests:
        memory: "256Mi"  # Increased for better performance
        cpu: "100m"      # Increased for better performance
      limits:
        memory: "512Mi"  # Increased for better performance
        cpu: "200m"      # Increased for better performance
    env:
      - name: SPRING_PROFILES_ACTIVE
        value: "{{ .Values.global.environment }}"
      # Downward API for namespace (used in OTEL resource attributes)
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      # OpenTelemetry tracing to in-cluster Alloy receiver (OTLP/HTTP)
      - name: OTEL_SERVICE_NAME
        value: "order-service"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "service.name=order-service,service.namespace=$(POD_NAMESPACE),deployment.environment={{ .Values.global.environment }}"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318"
      - name: OTEL_PROPAGATORS
        value: "tracecontext,baggage"
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  payment:
    enabled: true
    name: payment-service
    image: "payment:latest"
    replicaCount: 1
    containerPort: 8084
    usesDb: true
    service:
      type: ClusterIP
      port: 8084
    resources:
      requests:
        memory: "256Mi"  # Increased for better performance
        cpu: "100m"      # Increased for better performance
      limits:
        memory: "512Mi"  # Increased for better performance
        cpu: "200m"      # Increased for better performance
    env:
      - name: SPRING_PROFILES_ACTIVE
        value: "{{ .Values.global.environment }}"
      # Downward API for namespace (used in OTEL resource attributes)
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      # OpenTelemetry tracing to in-cluster Alloy receiver (OTLP/HTTP)
      - name: OTEL_SERVICE_NAME
        value: "payment-service"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "service.name=payment-service,service.namespace=$(POD_NAMESPACE),deployment.environment={{ .Values.global.environment }}"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318"
      - name: OTEL_PROPAGATORS
        value: "tracecontext,baggage"
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10


