global:
  imagePullPolicy: IfNotPresent
  # Optional registry prefix, e.g., ghcr.io/your-org
  imageRegistry: ""
  # Ingress global control
  ingress:
    enabled: false
    className: ""
    hosts: []
    tls: []

# Define microservices here
services:
  identity:
    enabled: true
    name: identity-service
    image: "sparkage/identity-service:latest"
    replicaCount: 1
    containerPort: 9000
    service:
      type: ClusterIP
      port: 9000
    resources: {}
    env: []
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  product:
    enabled: true
    name: product-service
    image: "sparkage/product-service:latest"
    replicaCount: 1
    containerPort: 9001
    service:
      type: ClusterIP
      port: 9001
    resources: {}
    env: []
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  cart:
    enabled: true
    name: cart-service
    image: "sparkage/cart-service:latest"
    replicaCount: 1
    containerPort: 9002
    service:
      type: ClusterIP
      port: 9002
    resources: {}
    env: []
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  order:
    enabled: true
    name: order-service
    image: "sparkage/order-service:latest"
    replicaCount: 1
    containerPort: 9003
    service:
      type: ClusterIP
      port: 9003
    resources: {}
    env: []
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  payment:
    enabled: true
    name: payment-service
    image: "sparkage/payment-service:latest"
    replicaCount: 1
    containerPort: 9004
    service:
      type: ClusterIP
      port: 9004
    resources: {}
    env: []
    livenessProbe:
      path: /actuator/health/liveness
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health/readiness
      initialDelaySeconds: 10
      periodSeconds: 10

  api-gateway:
    enabled: true
    name: api-gateway
    image: "sparkage/api-gateway:latest"
    replicaCount: 1
    containerPort: 8080
    service:
      type: ClusterIP
      port: 8080
    resources: {}
    # Configure backend URIs and security/rate limit via env vars
    env:
      - name: IDENTITY_URI
        value: http://{{ $.Release.Name }}-identity:9000
      - name: PRODUCT_URI
        value: http://{{ $.Release.Name }}-product:9001
      - name: CART_URI
        value: http://{{ $.Release.Name }}-cart:9002
      - name: ORDER_URI
        value: http://{{ $.Release.Name }}-order:9003
      - name: PAYMENT_URI
        value: http://{{ $.Release.Name }}-payment:9004
      - name: SECURITY_API_KEYS
        valueFrom:
          secretKeyRef:
            name: api-gateway-security
            key: apiKeys
      - name: RATE_LIMIT_REPLENISH_PER_SEC
        value: "10"
      - name: RATE_LIMIT_BURST_CAPACITY
        value: "20"
      - name: RATE_LIMIT_CACHE_MINUTES
        value: "10"
    livenessProbe:
      path: /actuator/health
      initialDelaySeconds: 15
      periodSeconds: 10
    readinessProbe:
      path: /actuator/health
      initialDelaySeconds: 10
      periodSeconds: 10
