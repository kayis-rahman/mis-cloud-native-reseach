spring:
  application:
    name: api-gateway
  main:
    web-application-type: reactive
  cloud:
    gateway:
      default-filters:
        - RemoveRequestHeader=Cookie
        - RemoveResponseHeader=Server
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: ${RATELIMIT_REPLENISH_RATE:50}
            redis-rate-limiter.burstCapacity: ${RATELIMIT_BURST_CAPACITY:100}
            key-resolver: "#{@ipKeyResolver}"
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY,GATEWAY_TIMEOUT
            methods: GET,POST
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOriginPatterns:
              - "https://*.yourdomain.com"
              - "https://yourdomain.com"
            allowedMethods: "GET,POST,PUT,PATCH,DELETE,OPTIONS"
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600
      routes:
        - id: identity
          uri: ${IDENTITY_URI:http://identity-service:8085}
          predicates:
            - Path=/api/identity/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: identity-cb
                fallbackUri: forward:/fallback/identity
            - name: RequestSize
              args:
                maxSize: 5MB
        - id: product
          uri: ${PRODUCT_URI:http://product-service:8081}
          predicates:
            - Path=/api/products/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: product-cb
                fallbackUri: forward:/fallback/product
        - id: cart
          uri: ${CART_URI:http://cart-service:8082}
          predicates:
            - Path=/api/cart/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: cart-cb
                fallbackUri: forward:/fallback/cart
        - id: order
          uri: ${ORDER_URI:http://order-service:8083}
          predicates:
            - Path=/api/orders/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: order-cb
                fallbackUri: forward:/fallback/order
        - id: payment
          uri: ${PAYMENT_URI:http://payment-service:8084}
          predicates:
            - Path=/api/payments/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: payment-cb
                fallbackUri: forward:/fallback/payment

server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,text/html,text/xml,text/plain,text/css,application/javascript

# Enhanced security for production
security:
  api-keys: ${SECURITY_API_KEYS:prod-secure-api-key}
  header-name: ${SECURITY_HEADER_NAME:X-API-Key}

# Production logging configuration
logging:
  level:
    com.sparkage: INFO
    org.springframework.cloud.gateway: WARN
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.springframework.boot.actuate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: /app/logs/api-gateway.log

# Enhanced management endpoints for production with security
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      enabled: true
      show-details: when-authorized
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 30s
    distribution:
      percentiles-histogram:
        http.server.requests: true
        resilience4j.circuitbreaker.calls: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        resilience4j.circuitbreaker.calls: 0.5, 0.9, 0.95, 0.99
    tags:
      application: ${spring.application.name}
      environment: production
      version: ${APP_VERSION:unknown}
  tracing:
    sampling:
      probability: ${OTEL_SAMPLING_PROBABILITY:1.0}


# OpenTelemetry to Grafana Cloud or in-cluster Alloy (override via env)
otel:
  traces:
    exporter: ${OTEL_TRACES_EXPORTER:otlp}
  exporter:
    otlp:
      protocol: ${OTEL_EXPORTER_OTLP_PROTOCOL:http/protobuf}
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318}
      headers: ${OTEL_EXPORTER_OTLP_HEADERS:}
  propagators: ${OTEL_PROPAGATORS:tracecontext,baggage}
