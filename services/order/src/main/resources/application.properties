# Spring Boot application properties
spring.application.name=order-service
server.port=9003
management.endpoints.web.exposure.include=health,info

# Datasource configuration
# Defaults target local/dev, but can be overridden via environment variables in prod:
# SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME, SPRING_DATASOURCE_PASSWORD
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/orderdb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:order}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:order}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP pool tuning to avoid exhausting Cloud SQL connections on small instances
spring.datasource.hikari.maximum-pool-size=2
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=60000
spring.datasource.hikari.connection-timeout=30000

# JPA & Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Explicit Hibernate dialect to prevent startup failure when JDBC metadata is unavailable
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# OpenTelemetry to Grafana Cloud or in-cluster Alloy (override via env)
management.tracing.sampling.probability=${OTEL_SAMPLING_PROBABILITY:1.0}
otel.traces.exporter=${OTEL_TRACES_EXPORTER:otlp}
otel.exporter.otlp.protocol=${OTEL_EXPORTER_OTLP_PROTOCOL:http/protobuf}
otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://grafana-k8s-monitoring-alloy-receiver.grafana.svc.cluster.local:4318}
otel.exporter.otlp.headers=${OTEL_EXPORTER_OTLP_HEADERS:}
otel.propagators=${OTEL_PROPAGATORS:tracecontext,baggage}
