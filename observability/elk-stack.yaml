apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        ports:
        - containerPort: 9200
        - containerPort: 9300
        env:
        - name: discovery.type
          value: "single-node"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        - name: xpack.security.enabled
          value: "false"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: elasticsearch-storage
          mountPath: /usr/share/elasticsearch/data
      volumes:
      - name: elasticsearch-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
  namespace: observability
spec:
  selector:
    app: elasticsearch
  ports:
  - port: 9200
    targetPort: 9200
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.8.0
        ports:
        - containerPort: 5000
        - containerPort: 9600
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/pipeline
        env:
        - name: LS_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        - name: XPACK_MONITORING_ENABLED
          value: "false"
        resources:
          requests:
            memory: "768Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: logstash-config
        configMap:
          name: logstash-config
---
apiVersion: v1
kind: Service
metadata:
  name: logstash-service
  namespace: observability
spec:
  selector:
    app: logstash
  ports:
  - port: 5000
    targetPort: 5000
    name: tcp
  - port: 9600
    targetPort: 9600
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: observability
data:
  logstash.conf: |
    input {
      tcp {
        port => 5000
        codec => json_lines
      }
    }
    
    filter {
      if [service] {
        mutate {
          add_field => { "[@metadata][service]" => "%{service}" }
        }
      }
      
      # Parse timestamp
      date {
        match => [ "timestamp", "ISO8601" ]
      }
      
      # Add additional fields
      mutate {
        add_field => { "environment" => "${ENV:development}" }
        add_field => { "cluster" => "kubernetes" }
      }
    }
    
    output {
      elasticsearch {
        hosts => ["elasticsearch-service:9200"]
        index => "microservices-logs-%{+YYYY.MM.dd}"
        template_name => "microservices"
        template_pattern => "microservices-*"
        template => {
          "index_patterns" => ["microservices-*"]
          "settings" => {
            "number_of_shards" => 1
            "number_of_replicas" => 0
          }
          "mappings" => {
            "properties" => {
              "@timestamp" => { "type" => "date" }
              "service" => { "type" => "keyword" }
              "level" => { "type" => "keyword" }
              "message" => { "type" => "text" }
              "traceId" => { "type" => "keyword" }
              "spanId" => { "type" => "keyword" }
              "environment" => { "type" => "keyword" }
            }
          }
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.8.0
        ports:
        - containerPort: 5601
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch-service:9200"
        - name: XPACK_SECURITY_ENABLED
          value: "false"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 60
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 120
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: kibana-service
  namespace: observability
spec:
  selector:
    app: kibana
  ports:
  - port: 5601
    targetPort: 5601
  type: LoadBalancer
